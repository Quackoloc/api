name: Build and Deploy to Clever Cloud

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: quackoloc_test
        options: >-
          --health-cmd="pg_isready -U test -d quackoloc_test"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for Postgres to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U test -d quackoloc_test; do
            echo "Waiting for postgres..."
            sleep 2
          done

      - name: Check code format with Prettier
        run: npm run format:check

      - name: Check code with ESLint
        run: npm run lint:check

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgres://test:test@localhost:5432/quackoloc_test
        run: npm run test:cov

      - name: Write to Job Summary
        run: |
          echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f coverage/coverage-summary.json ]; then
            echo "| Metric | Coverage |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|----------|" >> $GITHUB_STEP_SUMMARY
            cat coverage/coverage-summary.json | jq -r '
              "| Lines | " + (.total.lines.pct | tostring) + "% |",
              "| Functions | " + (.total.functions.pct | tostring) + "% |", 
              "| Branches | " + (.total.branches.pct | tostring) + "% |",
              "| Statements | " + (.total.statements.pct | tostring) + "% |"
            ' >> $GITHUB_STEP_SUMMARY
          else
            echo "Coverage data not available" >> $GITHUB_STEP_SUMMARY
          fi
  

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    outputs:
      image-tag: ${{ steps.meta.outputs.tag }}
      repo-owner: ${{ steps.meta.outputs.repo-owner }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_TOKEN }}
      - name: Inject .env from GitHub secret
        run: echo "${{ secrets.ENV_FILE }}" > .env
      - name: Set image metadata
        id: meta
        run: |
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          TAG=$(git rev-parse --short HEAD)
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "repo-owner=$REPO_OWNER" >> $GITHUB_OUTPUT
      - name: Build and push API image
        run: |
          REPO_OWNER=${{ steps.meta.outputs.repo-owner }}
          TAG=${{ steps.meta.outputs.tag }}
          docker build --no-cache -t ghcr.io/$REPO_OWNER/quackoloc.api:$TAG -f ./dockerfiles/build.Dockerfile .
          docker tag ghcr.io/$REPO_OWNER/quackoloc.api:$TAG ghcr.io/$REPO_OWNER/quackoloc.api:latest
          docker push ghcr.io/$REPO_OWNER/quackoloc.api:$TAG
          docker push ghcr.io/$REPO_OWNER/quackoloc.api:latest

  upload-sourcemaps:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project (if needed)
        run: npm run build

      - name: Setup Sentry CLI
        run: npm install -g @sentry/cli

      - name: Upload sourcemaps to Sentry
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: npm run sentry:sourcemaps


  semantic-release:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  deploy-clever:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup SSH key for Clever Cloud
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.CLEVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan push-n3-par-clevercloud-customers.services.clever-cloud.com >> ~/.ssh/known_hosts

      - name: Add Clever remote and push
        run: |
          git remote add clever git+ssh://git@push-n3-par-clevercloud-customers.services.clever-cloud.com/app_c8a3f88e-d6eb-4cd0-af5e-478cb1c61458.git
          git push clever HEAD:master --force
